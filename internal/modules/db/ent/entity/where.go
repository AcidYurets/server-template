// Code generated by ent, DO NOT EDIT.

package entity

import (
	"server-template/internal/modules/db/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldID, id))
}

// Field applies equality check predicate on the "field" field. It's identical to FieldEQ.
func Field(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldField, v))
}

// FieldEQ applies the EQ predicate on the "field" field.
func FieldEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEQ(FieldField, v))
}

// FieldNEQ applies the NEQ predicate on the "field" field.
func FieldNEQ(v string) predicate.Entity {
	return predicate.Entity(sql.FieldNEQ(FieldField, v))
}

// FieldIn applies the In predicate on the "field" field.
func FieldIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldIn(FieldField, vs...))
}

// FieldNotIn applies the NotIn predicate on the "field" field.
func FieldNotIn(vs ...string) predicate.Entity {
	return predicate.Entity(sql.FieldNotIn(FieldField, vs...))
}

// FieldGT applies the GT predicate on the "field" field.
func FieldGT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGT(FieldField, v))
}

// FieldGTE applies the GTE predicate on the "field" field.
func FieldGTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldGTE(FieldField, v))
}

// FieldLT applies the LT predicate on the "field" field.
func FieldLT(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLT(FieldField, v))
}

// FieldLTE applies the LTE predicate on the "field" field.
func FieldLTE(v string) predicate.Entity {
	return predicate.Entity(sql.FieldLTE(FieldField, v))
}

// FieldContains applies the Contains predicate on the "field" field.
func FieldContains(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContains(FieldField, v))
}

// FieldHasPrefix applies the HasPrefix predicate on the "field" field.
func FieldHasPrefix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasPrefix(FieldField, v))
}

// FieldHasSuffix applies the HasSuffix predicate on the "field" field.
func FieldHasSuffix(v string) predicate.Entity {
	return predicate.Entity(sql.FieldHasSuffix(FieldField, v))
}

// FieldEqualFold applies the EqualFold predicate on the "field" field.
func FieldEqualFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldEqualFold(FieldField, v))
}

// FieldContainsFold applies the ContainsFold predicate on the "field" field.
func FieldContainsFold(v string) predicate.Entity {
	return predicate.Entity(sql.FieldContainsFold(FieldField, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entity) predicate.Entity {
	return predicate.Entity(func(s *sql.Selector) {
		p(s.Not())
	})
}
