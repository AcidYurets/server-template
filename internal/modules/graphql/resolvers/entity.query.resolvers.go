package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.34

import (
	"context"
	"server-template/internal/models/constants"
	"server-template/internal/modules/domain/entity/dto"
	"strconv"
)

// EntityGet is the resolver for the EntityGet field.
func (r *queryResolver) EntityGet(ctx context.Context, id string) (*dto.Entity, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	entity, err := r.entityService.GetById(ctx, idInt)
	return entity, err
}

// EntityList is the resolver for the EntityList field.
func (r *queryResolver) EntityList(ctx context.Context) ([]*dto.Entity, error) {
	entities, err := r.entityService.List(ctx)
	return entities, err
}

// EntityCreate is the resolver for the EntityCreate field.
func (r *queryResolver) EntityCreate(ctx context.Context, entity dto.EntityCreate) (*dto.Entity, error) {
	createdEntity, err := r.entityService.Create(ctx, &entity)
	return createdEntity, err
}

// EntityUpdate is the resolver for the EntityUpdate field.
func (r *queryResolver) EntityUpdate(ctx context.Context, id string, entity dto.EntityUpdate) (*dto.Entity, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return nil, err
	}

	updatedEntity, err := r.entityService.Update(ctx, idInt, &entity)
	return updatedEntity, err
}

// EntityDelete is the resolver for the EntityDelete field.
func (r *queryResolver) EntityDelete(ctx context.Context, id string) (string, error) {
	idInt, err := strconv.Atoi(id)
	if err != nil {
		return "", err
	}

	err = r.entityService.Delete(ctx, idInt)
	return constants.ResponseSuccess, err
}
